service: kiepski-bot

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: eu-central-1 # your region here
  httpApi:
    cors: true
  memorySize: 128 # optional, in MB, default is 1024
  # https://www.serverless.com/framework/docs/providers/aws/guide/iam
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 's3:ListBucket'
          # Resource: '*'
          Resource:
            # - 'arn:aws:s3:::${self:custom.s3BucketName}'
            - 'arn:aws:s3:::${self:custom.s3BucketName1}'
            - 'arn:aws:s3:::${self:custom.s3BucketName2}'

        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            # - 's3:PutObject'
          Resource:
            # - 'arn:aws:s3:::${self:custom.s3BucketName}/*'
            - 'arn:aws:s3:::${self:custom.s3BucketName1}/*'
            - 'arn:aws:s3:::${self:custom.s3BucketName2}/*'

  
  # apiGateway:
    # apiKeys:
    #   - "kiepskibot-api-key"
    # binaryMediaTypes:
    #   - 'image/jpeg'
  # Optional usage plan configuration
    # usagePlan:
    #   quota:
    #     limit: 5000
    #     offset: 2
    #     period: MONTH
    #   throttle:
    #     burstLimit: 200
    #     rateLimit: 100


functions:
  meme-func:
    handler: handler.lambda_handler
    environment:
      # S3_BUCKET: ${self:custom.s3BucketName}
      S3_BUCKET_PEPE: ${self:custom.s3BucketName1}
      S3_BUCKET_KIEPSCY: ${self:custom.s3BucketName2}
      
      TELEGRAM_BOT_TOKEN: ${self:custom.telegramBotToken}
      CHAT_ID: ${self:custom.telegramChatId}
    events:
      # Gateway type: REST vs HTTP API
      - httpApi:
      # - http:
          path: /kiepskibot/random
          # method: GET
          method: POST
          # enable if wish to use API key
          # private: true
          # throttling:
          #   maxRequestsPerSecond: 10
          #   maxConcurrentRequests: 20
    # Configure the size of ephemeral storage available to your Lambda function (in MBs, default: 512)
    ephemeralStorageSize: 512
package:
  patterns:
    # Include only those files
    - ./package/**
    - handler.py
    - config.yml
    - toasts.txt
      


hooks:
  # Add the before:deploy hook
  before:deploy:installDependencies:
    commands:
      - pip install -r requirements.txt -t ./package



custom:
  # s3BucketName: ${env:S3_BUCKET}
  s3BucketName1: ${env:S3_BUCKET_PEPE}
  s3BucketName2: ${env:S3_BUCKET_KIEPSCY}

  telegramBotToken: ${env:TELEGRAM_BOT_TOKEN}
  telegramChatId: ${env:CHAT_ID}
  # # Add the pythonRequirements section
  # pythonRequirements:
  #   # ensures that the dependencies are installed in an environment similar to the Lambda execution environment, and slim: true reduces the package size. 
  #   dockerizePip: false
  #   slim: true



